//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HOTELMANAGEWEB.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QLKSWEBEntities : DbContext
    {
        public QLKSWEBEntities()
            : base("name=QLKSWEBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AccountPermission> AccountPermission { get; set; }
        public virtual DbSet<AccountType> AccountType { get; set; }
        public virtual DbSet<Bill> Bill { get; set; }
        public virtual DbSet<BillDetail> BillDetail { get; set; }
        public virtual DbSet<Booking> Booking { get; set; }
        public virtual DbSet<BookingRoom> BookingRoom { get; set; }
        public virtual DbSet<BookingServices> BookingServices { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<EquipmentType> EquipmentType { get; set; }
        public virtual DbSet<EquipRequest> EquipRequest { get; set; }
        public virtual DbSet<MaintenanceHistory> MaintenanceHistory { get; set; }
        public virtual DbSet<ModuleList> ModuleList { get; set; }
        public virtual DbSet<Promotion> Promotion { get; set; }
        public virtual DbSet<Request> Request { get; set; }
        public virtual DbSet<RequestType> RequestType { get; set; }
        public virtual DbSet<Room> Room { get; set; }
        public virtual DbSet<RoomRequest> RoomRequest { get; set; }
        public virtual DbSet<RoomServices> RoomServices { get; set; }
        public virtual DbSet<RoomType> RoomType { get; set; }
        public virtual DbSet<Services> Services { get; set; }
        public virtual DbSet<ServicesType> ServicesType { get; set; }
    
        public virtual int Find_AvailableRoom(Nullable<int> numPerson, Nullable<System.DateTime> checkinDate, Nullable<System.DateTime> checkoutDate)
        {
            var numPersonParameter = numPerson.HasValue ?
                new ObjectParameter("NumPerson", numPerson) :
                new ObjectParameter("NumPerson", typeof(int));
    
            var checkinDateParameter = checkinDate.HasValue ?
                new ObjectParameter("CheckinDate", checkinDate) :
                new ObjectParameter("CheckinDate", typeof(System.DateTime));
    
            var checkoutDateParameter = checkoutDate.HasValue ?
                new ObjectParameter("CheckoutDate", checkoutDate) :
                new ObjectParameter("CheckoutDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Find_AvailableRoom", numPersonParameter, checkinDateParameter, checkoutDateParameter);
        }
    
        public virtual int Find_AvailableServices(Nullable<int> servicesID, Nullable<System.DateTime> dateBook)
        {
            var servicesIDParameter = servicesID.HasValue ?
                new ObjectParameter("ServicesID", servicesID) :
                new ObjectParameter("ServicesID", typeof(int));
    
            var dateBookParameter = dateBook.HasValue ?
                new ObjectParameter("DateBook", dateBook) :
                new ObjectParameter("DateBook", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Find_AvailableServices", servicesIDParameter, dateBookParameter);
        }
    
        public virtual ObjectResult<Get_Module_Result> Get_Module(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Module_Result>("Get_Module", userNameParameter);
        }
    
        public virtual int sp_dumpparam(string sUName, Nullable<int> dumpValue)
        {
            var sUNameParameter = sUName != null ?
                new ObjectParameter("SUName", sUName) :
                new ObjectParameter("SUName", typeof(string));
    
            var dumpValueParameter = dumpValue.HasValue ?
                new ObjectParameter("DumpValue", dumpValue) :
                new ObjectParameter("DumpValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dumpparam", sUNameParameter, dumpValueParameter);
        }
    
        public virtual ObjectResult<Store_Login_Result> Store_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Store_Login_Result>("Store_Login", userNameParameter, passwordParameter);
        }
    }
}
