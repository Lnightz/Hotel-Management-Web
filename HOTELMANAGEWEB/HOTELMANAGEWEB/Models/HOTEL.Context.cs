//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HOTELMANAGEWEB.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QLKSWEBEntities : DbContext
    {
        public QLKSWEBEntities()
            : base("name=QLKSWEBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountPermission> AccountPermissions { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<BillDetail> BillDetails { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<BookingRoom> BookingRooms { get; set; }
        public virtual DbSet<BookingService> BookingServices { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Equipment> Equipments { get; set; }
        public virtual DbSet<EquipmentType> EquipmentTypes { get; set; }
        public virtual DbSet<EquipRequest> EquipRequests { get; set; }
        public virtual DbSet<MaintenanceHistory> MaintenanceHistories { get; set; }
        public virtual DbSet<ModuleList> ModuleLists { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<RequestType> RequestTypes { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomRequest> RoomRequests { get; set; }
        public virtual DbSet<RoomService> RoomServices { get; set; }
        public virtual DbSet<RoomType> RoomTypes { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServicesType> ServicesTypes { get; set; }
    
        public virtual int Find_AvailableRoom(Nullable<int> numPerson, Nullable<System.DateTime> checkinDate, Nullable<System.DateTime> checkoutDate)
        {
            var numPersonParameter = numPerson.HasValue ?
                new ObjectParameter("NumPerson", numPerson) :
                new ObjectParameter("NumPerson", typeof(int));
    
            var checkinDateParameter = checkinDate.HasValue ?
                new ObjectParameter("CheckinDate", checkinDate) :
                new ObjectParameter("CheckinDate", typeof(System.DateTime));
    
            var checkoutDateParameter = checkoutDate.HasValue ?
                new ObjectParameter("CheckoutDate", checkoutDate) :
                new ObjectParameter("CheckoutDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Find_AvailableRoom", numPersonParameter, checkinDateParameter, checkoutDateParameter);
        }
    
        public virtual int Find_AvailableServices(Nullable<int> servicesID, Nullable<System.DateTime> dateBook)
        {
            var servicesIDParameter = servicesID.HasValue ?
                new ObjectParameter("ServicesID", servicesID) :
                new ObjectParameter("ServicesID", typeof(int));
    
            var dateBookParameter = dateBook.HasValue ?
                new ObjectParameter("DateBook", dateBook) :
                new ObjectParameter("DateBook", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Find_AvailableServices", servicesIDParameter, dateBookParameter);
        }
    
        public virtual ObjectResult<ModuleList> Get_Module(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModuleList>("Get_Module", userNameParameter);
        }
    
        public virtual ObjectResult<ModuleList> Get_Module(string userName, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModuleList>("Get_Module", mergeOption, userNameParameter);
        }
    
        public virtual ObjectResult<Account> Store_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("Store_Login", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Account> Store_Login(string userName, string password, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("Store_Login", mergeOption, userNameParameter, passwordParameter);
        }
    }
}
